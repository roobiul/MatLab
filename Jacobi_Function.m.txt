clc; clear; close all;

% Define coefficient matrix A and right-hand side vector B
A = [10 -1  2  0; 
     -1 11 -1  3; 
      2 -1 10 -1; 
      0  3 -1  8];

B = [6; 25; -11; 15];

% Initial guess
x0 = zeros(size(B));

% Convergence parameters
tol = 1e-4; % Error tolerance
max_iter = 100; % Maximum iterations

%% (a) Solve using Jacobi Iteration
[x_jacobi, errors_jacobi, iter_jacobi] = jacobi_iteration(A, B, x0, tol, max_iter);

%% (b) Solve using Gauss-Seidel Iteration
[x_gs, errors_gs, iter_gs] = gauss_seidel_iteration(A, B, x0, tol, max_iter);

% Display results
disp('Solution using Jacobi Iteration:');
disp(table(x_jacobi, 'VariableNames', {'Jacobi Solution'}));

disp('Solution using Gauss-Seidel Iteration:');
disp(table(x_gs, 'VariableNames', {'Gauss-Seidel Solution'}));

% Compare Convergence Rates
fprintf('Jacobi converged in %d iterations\n', iter_jacobi);
fprintf('Gauss-Seidel converged in %d iterations\n', iter_gs);

%% (c) Plot convergence of residual errors
figure;
semilogy(errors_jacobi, '-o', 'LineWidth', 1.5, 'MarkerSize', 5);
hold on;
semilogy(errors_gs, '-s', 'LineWidth', 1.5, 'MarkerSize', 5);
xlabel('Iteration Number');
ylabel('Residual Error (Log Scale)');
title('Convergence of Jacobi vs. Gauss-Seidel');
legend('Jacobi', 'Gauss-Seidel', 'Location', 'Northeast');
grid on;

%% (d) Analysis
disp('Analysis:');
disp('Gauss-Seidel converges faster than Jacobi because it uses updated values immediately,');
disp('while Jacobi waits for a full iteration before updating.');

%% Jacobi Function
function [x, errors, iter] = jacobi_iteration(A, B, x0, tol, max_iter)
    n = length(B);
    x = x0;
    errors = [];
    
    for iter = 1:max_iter
        x_new = zeros(n,1);
        
        for i = 1:n
            sum1 = A(i,1:i-1) * x(i-1:-1:1);
            sum2 = A(i,i+1:n) * x(i+1:n);
            x_new(i) = (B(i) - sum1 - sum2) / A(i,i);
        end
        
        err = norm(x_new - x, inf);
        errors = [errors; err];
        
        if err < tol
            break;
        end
        
        x = x_new;
    end
end

%% Gauss Seidel function
function [x, errors, iter] = gauss_seidel_iteration(A, B, x0, tol, max_iter)
    n = length(B);
    x = x0;
    errors = [];
    
    for iter = 1:max_iter
        x_old = x;
        
        for i = 1:n
            sum1 = A(i,1:i-1) * x(1:i-1);
            sum2 = A(i,i+1:n) * x_old(i+1:n);
            x(i) = (B(i) - sum1 - sum2) / A(i,i);
        end
        
        err = norm(x - x_old, inf);
        errors = [errors; err];
        
        if err < tol
            break;
        end
    end
end
